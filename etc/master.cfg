# -*- python -*-
# ex: set filetype=python:

from buildbot.steps import shell, transfer, master, worker
from buildbot.process.properties import WithProperties
from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("example-worker", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 'tcp:9989:interface=127.0.0.1'}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://git.quantumachine.net/opensource/dragonfly.git',
        workdir='gitpoller-workdir', branches=['master', 'DragonFly_RELEASE_4_6'],
        pollinterval=300))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="master",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["master"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="release",
                            change_filter=util.ChangeFilter(branch='DragonFly_RELEASE_4_6'),
                            treeStableTimer=None,
                            builderNames=["release"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force_master",
                            builderNames=["master"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force_release",
                            builderNames=["release"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.


#
# master factory
#
f_master = util.BuildFactory()

master_src = steps.Git(
    repourl='https://git.quantumachine.net/opensource/dragonfly.git',
    mode='incremental',
    branch='master')

#master_vkernel_up = steps.ShellCommand(name="master_vkernel_up",
#                                       command=['mkdir',
#                                                '-p',
#                                                WithProperties('%(builddir)s/root-%(gitversion)s')],
#                                       haltOnFailure=True,
#                                       description="Create root directory")

f_master.addStep(master_src)

#
# release-specific factory steps
# 
f_release = util.BuildFactory()

release_src = steps.Git(
    repourl='https://git.quantumachine.net/opensource/dragonfly.git',
    mode='incremental',
    branch='DragonFly_RELEASE_4_6')

f_release.addStep(release_src)

#
# common steps
#
gitrev = shell.SetProperty(
    command = 'tools/gitrev.sh',
    property = 'gitversion',
    haltOnFailure=True)

ncpu = shell.SetProperty(
    command = 'sysctl -n hw.ncpu',
    property = 'ncpu',
    haltOnFailure=True)

vkernel_on = shell.SetProperty(
    command = '[ `sysctl -n vm.vkernel_enable` -eq 1 ]',
    property = 'vkernel_on',
    haltOnFailure=True)

# create root directory
rootdir = steps.ShellCommand(name="rootdir",
                             command=['mkdir',
                                      '-p',
                                      WithProperties('%(builddir)s/root-%(gitversion)s')],
                             haltOnFailure=True,
                             description="Create root directory")


test1 = steps.ShellCommand(name="test1",
                             command=['ls',
                                      '-l',
                                      '/'])
          
f_master.addStep(gitrev)
f_master.addStep(ncpu)
f_master.addStep(vkernel_on)
f_master.addStep(rootdir)
f_master.addStep(test1)

f_release.addStep(gitrev)
f_release.addStep(ncpu)
f_release.addStep(vkernel_on)
f_release.addStep(rootdir)

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(
        name="master",
        workernames=["example-worker"],
        factory=f_master))
c['builders'].append(
    util.BuilderConfig(
        name="release",
        workernames=["example-worker"],
        factory=f_release))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "DragonFly BSD"
c['titleURL'] = "https://www.dragonflybsd.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
